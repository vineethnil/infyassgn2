{"version":3,"sources":["components/Upload.js","App.js","serviceWorker.js","index.js"],"names":["Upload","props","state","tabledata","fileHandler","bind","e","preventDefault","that","this","fileObj","target","files","reader","FileReader","onload","data","result","readedData","XLSX","read","type","wsname","SheetNames","ws","Sheets","dataParse","utils","sheet_to_json","header","finalarray","i","length","filtered","filter","el","push","tablecontent","j","includes","thisarray","indexOf","moment","format","setState","readAsBinaryString","tablecontentraw","tablerow","Object","keys","map","item","key","id","onChange","React","Component","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iaAgGeA,E,YA1Fd,WAAaC,GAAQ,IAAD,8BACnB,4CAAMA,KACDC,MAAQ,CACZC,UAAU,IAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALA,E,yEAURC,GACXA,EAAEC,iBACF,IAAIC,EAAMC,KAGNC,EAAUJ,EAAEK,OAAOC,MAAM,GACzBC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAUT,GAWzB,IARM,IAAIU,EAAOV,EAAEK,OAAOM,OAChBC,EAAaC,IAAKC,KAAKJ,EAAM,CAACK,KAAM,WAClCC,EAASJ,EAAWK,WAAW,GAC/BC,EAAKN,EAAWO,OAAOH,GACvBI,EAAYP,IAAKQ,MAAMC,cAAcJ,EAAI,CAACK,OAAO,IAGnDC,EAAa,GACdC,EAAI,EAAGA,EAAEL,EAAUM,OAAOD,IAAK,CACvC,IAAIE,EAAWP,EAAUK,GAAGG,QAAO,SAAUC,GAC3C,OAAa,MAANA,KAENF,EAASD,OAAO,GAClBF,EAAWM,KAAKH,GAMZ,IADA,IAAII,EAAe,GACVC,EAAI,EAAEA,EAAER,EAAWE,OAAOM,IAAK,CACvC,GAAGR,EAAWQ,GAAGC,SAAS,QAAQ,CACjC,IAAIC,EAAYV,EAAWQ,GAC3BD,EAAY,KAASG,EAAUA,EAAUC,QAAQ,QAAQ,GAE1D,GAAGX,EAAWQ,GAAGC,SAAS,qBAAqB,CAC9C,IAAIC,EAAYV,EAAWQ,GAC3BD,EAAa,qBAAqBK,IAAOF,EAAUA,EAAUC,QAAQ,qBAAqB,IAAIE,OAAO,cAEtG,GAAGb,EAAWQ,GAAGC,SAAS,MAAM,CAC/B,IAAIC,EAAYV,EAAWQ,GAC3BD,EAAY,GAAOG,EAAUA,EAAUC,QAAQ,MAAM,GAEtD,GAAGX,EAAWQ,GAAGC,SAAS,MAAM,CAC/B,IAAIC,EAAYV,EAAWQ,GAC3BD,EAAY,GAAOG,EAAUA,EAAUC,QAAQ,MAAM,IAKvDjC,EAAKoC,SAAS,CACbzC,UAAUkC,KAGfxB,EAAOgC,mBAAmBnC,K,+BAO7B,IAAMoC,EAAkBrC,KAAKP,MAAMC,UAC7B4C,EAAWC,OAAOC,KAAKH,GAAiBI,KAAI,SAACC,EAAMpB,GAAP,OACjD,wBAAIqB,IAAKrB,GACG,4BAAKoB,GACL,4BAAKL,EAAgBK,QAGlC,OACC,yBAAKE,GAAG,cACP,2BAAOhC,KAAK,OAAOiC,SAAU7C,KAAKL,cAClC,2BAAOiD,GAAG,UACE,+BACIN,S,GAnFCQ,IAAMC,WCuBZC,E,YArBb,WAAaxD,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,GAFK,E,sEAQlB,OACE,6BACE,yBAAKmD,GAAG,mBACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,KAAK,IAAIC,OAAK,EAACC,UAAW5D,IACjC,kBAAC,IAAD,CAAO0D,KAAK,UAAUE,UAAW5D,W,GAf3BuD,IAAMC,W,QCOJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAD,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.764634ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport './main.css';\r\nimport XLSX from 'xlsx';\r\nimport moment from 'moment';\r\n\r\nclass Upload extends React.Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { \r\n\t\t\ttabledata:{}\r\n\t\t};\r\n\t\tthis.fileHandler = this.fileHandler.bind(this);\r\n\t}\r\n\r\n\r\n\t//handle file change\r\n\tfileHandler(e){\r\n\t\te.preventDefault();\r\n\t\tvar that =this;\r\n\r\n\t\t// reading file\r\n\t\tlet fileObj = e.target.files[0];\r\n\t\tvar reader = new FileReader();\r\n\t\treader.onload = function (e) {\r\n\r\n\t\t\t// getting data from the file\r\n\t        var data = e.target.result;\r\n\t        let readedData = XLSX.read(data, {type: 'binary'});\r\n\t        const wsname = readedData.SheetNames[0];\r\n\t        const ws = readedData.Sheets[wsname];\r\n\t        const dataParse = XLSX.utils.sheet_to_json(ws, {header:1});\r\n\r\n        \t//filtering out empty data from the array\r\n        \tlet finalarray = [];\r\n\t\t\tfor (var i = 0; i<dataParse.length;i++) {\r\n\t\t\t\tlet filtered = dataParse[i].filter(function (el) {\r\n\t\t\t\t  return el != null;\r\n\t\t\t\t});\r\n\t\t\t\tif(filtered.length>0){\r\n\t\t\t\t\tfinalarray.push(filtered)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n        \t// create json for table data\r\n        \tvar tablecontent = {};\r\n        \tfor (var j = 0;j<finalarray.length;j++) {\r\n        \t\tif(finalarray[j].includes(\"Name\")){\r\n        \t\t\tlet thisarray = finalarray[j];\r\n        \t\t\ttablecontent[\"Name\"]=thisarray[thisarray.indexOf(\"Name\")+1];\r\n        \t\t}\r\n        \t\tif(finalarray[j].includes(\"Registration date\")){\r\n        \t\t\tlet thisarray = finalarray[j];\r\n        \t\t\ttablecontent[\"Registration date\"]=moment(thisarray[thisarray.indexOf(\"Registration date\")+1]).format('DD-MM-YYYY');\r\n        \t\t}\r\n        \t\tif(finalarray[j].includes(\"a2\")){\r\n        \t\t\tlet thisarray = finalarray[j];\r\n        \t\t\ttablecontent[\"a2\"]=thisarray[thisarray.indexOf(\"a2\")+1];\r\n        \t\t}\r\n        \t\tif(finalarray[j].includes(\"b2\")){\r\n        \t\t\tlet thisarray = finalarray[j];\r\n        \t\t\ttablecontent[\"b2\"]=thisarray[thisarray.indexOf(\"b2\")+1];\r\n        \t\t}\r\n        \t}\r\n\r\n        \t// setting state value\r\n        \tthat.setState({\r\n        \t\ttabledata:tablecontent\r\n        \t})\r\n\t    };\r\n\t    reader.readAsBinaryString(fileObj);\r\n\t}\r\n\t\r\n\r\n\trender() {\r\n\r\n\t\t// mapping throu the content\r\n\t\tconst tablecontentraw = this.state.tabledata;\r\n\t\tconst tablerow = Object.keys(tablecontentraw).map((item, i) => (\r\n\t\t\t<tr key={i}>\r\n               <td>{item}</td>\r\n               <td>{tablecontentraw[item]}</td>\r\n            </tr>\r\n\t    ))\t\r\n\t\treturn (\r\n\t\t\t<div id=\"outer_cntr\">\t\r\n\t\t\t\t<input type=\"file\" onChange={this.fileHandler}/>\r\n\t\t\t\t<table id=\"upload\">\r\n\t               <tbody>\r\n\t                  {tablerow}\r\n\t               </tbody>\r\n\t            </table>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\nexport default Upload","import React from 'react';\nimport { Route,Switch } from \"react-router-dom\";\nimport './App.css';\nimport Upload from \"./components/Upload\";\n\nclass App extends React.Component {\n\n  constructor (props) {\n    super(props);\n    this.state = { \n       \n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"main_outer_cntr\">\n          <Switch>\n            <Route path=\"/\" exact component={Upload}/>\n            <Route path=\"/upload\" component={Upload}/>\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render( \n\t<HashRouter>\n\t\t<App /> \n\t</HashRouter>, \n\tdocument.getElementById('root')\n);\nserviceWorker.unregister();\n\n"],"sourceRoot":""}